<!doctype html>
<html lang="en" data-bs-theme="auto">
  <head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Vidul">
    <title>Database | Admin Panel</title>

    <%- include('../partials/links', {adminPanel: true}) %>    

<style>
       html, body {
        height: 100%;
        font-family: cursive;
        overflow: hidden;
      }
      .card-tools{
        display: none;
      }
      .card-tool{
        display: none;
        width: 30px;
        height: 30px;
        margin: 10px;
      }
      .card:hover .card-tools .card-tool{
        display: block;
      }
      .inner-arr-txt{
        margin-left: 30px;
        margin-bottom: 0px;
      }
      .exp-arr:hover {
        cursor: pointer;
      }
     input {
       height: max-content !important;
     }
</style>

  </head>
  <body>

    <!-- Icons -->
    <%- include('../partials/icons') %>

<main class="d-flex">

  <!-- Sidebar -->
  <%- include('../partials/admin-sidebar', {page: "database"}) %>

  <!-- Body -->
  <div class="container" style="max-height: 100%; max-width: 100%;">
    <div class="d-flex gap-2" style="padding-top: 20px; padding-left: 20px; padding-right: 20px;">
        <div style="height: 35px;">
            <button type="button" id="col-selector" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
              <svg class="bi pe-none me-2" width="16" height="16"><use xlink:href="#layer-group-solid"/></svg>Collection: Loading...
            </button>
            <ul class="dropdown-menu" id="collections-sel">
            </ul>
          </div>
          <div class="input-group">
            <div class="input-group-text"><svg class="bi pe-none me-2" width="16" height="16"><use xlink:href="#magnifying-glass-solid"/></svg></div>
            <input type="text" class="form-control" id="search-bar" placeholder="Search">
          </div>
          <div>
            <button type="button" style="height: 40px; width: 40px;" id="refreshbtn" onclick="load_cards(this)" class="btn btn-primary" aria-expanded="false"><span id="spinner" class="spinner-border" style="margin-left: -2.5px; height: 20px; width: 20px; display: none;" aria-hidden="true"></span><svg id="icon" class="bi pe-none me-2 position-absolute translate-middle" width="20" height="20" style="padding-right: -10px;"><use xlink:href="#rotate-right-solid"/></svg></button>
          </div>
          <div>
            <button type="button" id="insertbtn" data-bs-toggle="modal" data-bs-target="#addobjModal" data-bs-json="" style="height: 40px; width: 40px;" class="btn btn-primary" aria-expanded="false"><svg class="bi pe-none me-2 position-absolute translate-middle" width="20" height="20" style="padding-right: -10px;"><use xlink:href="#file-circle-plus-solid"/></svg></button>
          </div>
</div>

  <div class="b-divider" style="height: 5px; border-radius: 10px; margin-top: 20px; margin-bottom: 20px;"></div>

  <div style="height: 86.5%; overflow: scroll; overflow-x: hidden; position: fixed;">
  <div class="d-flex row-gap-3 column-gap-3 flex-wrap align-items-stretch" style="max-width: 100%; padding: 0px;" id="inside-collection">

    </div>
  </div>

  <!-- Toasts, Modals, ect -->

  <%- include('../partials/toasts') %>

<!-- Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="deleteModalLabel">Are You Sure That You Want To Delete The Following Object From This Collection?</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex justify-content-center" id="deleteModal-content">

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger deleteModal-confirm" onclick="deleteObj(this)" id="deleteModal-confirm">Confirm Deletion</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="editobjModal" tabindex="-1" aria-labelledby="editobjModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="editobjModalLabel">Edit Object</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex justify-content-center" id="editobjModal-content">

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-warning editobjModal-confirm" onclick="editObj(this)" id="editobjModal-confirm">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="addobjModal" tabindex="-1" aria-labelledby="addobjModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="addobjModalLabel">Insert Object</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex justify-content-center" id="addobjModal-content">

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-success addobjModal-confirm" onclick="addObj(this)" id="addobjModal-confirm">Insert Object</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="cloneobjModal" tabindex="-1" aria-labelledby="cloneobjModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="cloneobjModalLabel">Edit Object Clone</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex justify-content-center" id="cloneobjModal-content">

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-success cloneobjModal-confirm" onclick="cloneObj(this)" id="cloneobjModal-confirm">Clone Object</button>
      </div>
    </div>
  </div>
</div>

</div>
</main>
<script>
  $(document).ready(function(){
    let debounceTimer;

    $("#search-bar").on("input", function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(function() {
            performSearch();
        }, 1000);
    });

    function performSearch() {
        let searchText = $("#search-bar").val().trim().toLowerCase();
        let regex = new RegExp(searchText, "gi");
        $(".search-card").each(function() {
            let cardText2 = $(this).text().toLowerCase();
            $(this).find("p").each(function() {
                let cardText = $(this).text().toLowerCase().replace('<span style="background-color: rgba(0, 38, 255, 0.6); font-size: 17px; font-weight: bold;">', '').replace('</span>', '');
                if(searchText.length === 0){
                  $(this).html(cardText);
                }else{
                let markedText = cardText.replace(regex, function(match) {
                    return '<span style="background-color: rgba(0, 38, 255, 0.6); font-size: 17px; font-weight: bold;">' + match + '</span>';
                });
                $(this).html(markedText);
              }
            });
            if (cardText2.includes(searchText)) {
                $(this).show();
            } else {
                $(this).hide(); 
            }
        });
    }
});

  function exp_arr(element) {
     let href = $(element).find('.arr-pointer').attr("xlink:href")
     if(href === "#caret-right-solid"){
      $(element).find('.arr-pointer').attr("xlink:href", "#caret-down-solid")
     }else{
      $(element).find('.arr-pointer').attr("xlink:href", "#caret-right-solid")
     }
    }
    function copyJSON(element) {
        var textarea = $("<textarea>")
            .val($(element).find('#json').text())
            .appendTo("body")
            .select();
        document.execCommand("copy");
        textarea.remove();
        toast('Succcessfully Copied JSON Object', 'success', 3000)
    }

    function deleteObj(element) {
      axios.post('/api/database/delete', {
    collection: `${$('input[type="radio"][name="collection"]:checked').attr('id')}`,
    object_no: `${$(element).attr('id')}`
  }).then(function (res) {
  bootstrap.Modal.getInstance('#deleteModal').hide()
  load_cards()
  toast('Successfully Deleted Object From Collection', 'warning', 3000)
  })
  .catch(function (error) {
    console.log(error)
    if(error.response.status == 401){
      toast('Failed Delete Object From Collection, Check Server Console For Info.', 'danger', 3000)
    }
  });
    }

    const deleteModal = document.getElementById('deleteModal')
  deleteModal.addEventListener('show.bs.modal', event => {
    const button = event.relatedTarget
    const objno = button.getAttribute('data-bs-objno')
    $('.deleteModal-confirm').attr('id', `${objno}`)
    let clonedparent = $(button).parent().parent().clone(true)
    clonedparent.find('.card-tools').remove()
    $('#deleteModal-content').empty()
    clonedparent.appendTo('#deleteModal-content')
  })

  function editObj(element) {
    let jsondata = $('#editobjModal-content').data('bs-json')
 axios.post('/api/database/edit', {
    collection: `${$('input[type="radio"][name="collection"]:checked').attr('id')}`,
    object_no: `${$(element).attr('id')}`,
    json: JSON.parse(build_json(JSON.parse(jsondata), `${$('.editobjModal-confirm').attr('id')}_${Math.round(Math.random()*9999)}`, 'editobj'))
  }).then(function (res) {
  bootstrap.Modal.getInstance('#editobjModal').hide()
  load_cards()
 toast('Successfully Saved Changes', 'success', 3000)
  })
  .catch(function (error) {
    console.log(error)
    if(error.response.status == 401){
      toast('Failed To Save Changes, Check Server Console For Info.', 'danger', 3000)
    }
  });
    }

  const editobjModal = document.getElementById('editobjModal')
  editobjModal.addEventListener('show.bs.modal', event => {
    const button = event.relatedTarget
    const objno = button.getAttribute('data-bs-objno')
    const jsondata = button.getAttribute('data-bs-json')
    $('.editobjModal-confirm').attr('id', `${objno}`)
    $('#editobjModal-content').empty()
    $('#editobjModal-content').data('bs-json', jsondata)
    $('#editobjModal-content').append(create_edit_card(JSON.parse(jsondata), `${objno}_${Math.round(Math.random()*9999)}`))
  })

  function addObj(element) {
    let jsondata = $('#addobjModal-content').data('bs-json')
  axios.post('/api/database/create', {
    collection: `${$('input[type="radio"][name="collection"]:checked').attr('id')}`,
    object_no: `${$(element).attr('id')}`,
    json: JSON.parse(build_json(JSON.parse(jsondata), `${$('.addobjModal-confirm').attr('id')}_${Math.round(Math.random()*9999)}`, 'addobj'))
  }).then(function (res) {
  bootstrap.Modal.getInstance('#addobjModal').hide()
  load_cards()
  toast('Successfully Inserted Object', 'success', 3000)
  })
  .catch(function (error) {
    console.log(error)
    if(error.response.status == 401){
      toast('Failed To Insert Object, Check Server Console For Info.', 'danger', 3000)
    }
  });
    }

  const addobjModal = document.getElementById('addobjModal')
  addobjModal.addEventListener('show.bs.modal', event => {
    const button = event.relatedTarget
    const objno = button.getAttribute('data-bs-objno')
    const schema = $('#insertbtn').data('bs-schema')
    $('.addobjModal-confirm').attr('id', `${objno}`)
    $('#addobjModal-content').empty()
    $('#addobjModal-content').data('bs-json', schema)
    $('#addobjModal-content').append(create_add_card(JSON.parse(schema), `${objno}_${Math.round(Math.random()*9999)}`))
  })

  function cloneObj(element) {
    let jsondata = $('#cloneobjModal-content').data('bs-json')
  axios.post('/api/database/create', {
    collection: `${$('input[type="radio"][name="collection"]:checked').attr('id')}`,
    object_no: `${$(element).attr('id')}`,
    json: JSON.parse(build_json(JSON.parse(jsondata), `${$('.cloneobjModal-confirm').attr('id')}_${Math.round(Math.random()*9999)}`, 'cloneobj'))
  }).then(function (res) {
  bootstrap.Modal.getInstance('#cloneobjModal').hide()
  load_cards()
  toast('Successfully Cloned Object', 'success', 3000)
  })
  .catch(function (error) {
    console.log(error)
    if(error.response.status == 401){
      toast('Failed To Clone Object, Check Server Console For Info.', 'danger', 3000)
    }
  });
    }

  const cloneobjModal = document.getElementById('cloneobjModal')
  cloneobjModal.addEventListener('show.bs.modal', event => {
    const button = event.relatedTarget
    const objno = button.getAttribute('data-bs-objno')
    const jsondata = button.getAttribute('data-bs-json')
    $('.cloneobjModal-confirm').attr('id', `${objno}`)
    $('#cloneobjModal-content').empty()
    $('#cloneobjModal-content').data('bs-json', jsondata)
    $('#cloneobjModal-content').append(create_edit_card(JSON.parse(jsondata), `${objno}_${Math.round(Math.random()*9999)}`))
  })

  function create_add_card(data, i) {
            let collection = data
            let card_text = '';
            let keys = Object.keys(collection)

            function inputtype(type) {
              console.log(type)
              if(type === "Boolean"){
                return 'false'
              }
              if(type === "Number"){
                return '0'
              }
              return ""
            }

            function handleArr(array, CardID) {
              let objects = '';
              for (let i2 = 0; i2 < array.length; i2++) {
                let object_children = '';
                Object.keys(array[i2]).forEach(key => {
                  objects_children += `<span class="input-group input-group-sm mb-3 collapse inner-arr-txt" id="${CardID}_${i2}" style="width: max-content; margin-right: 50px;">
  <span class="input-group-text" id="inputGroup-sizing-sm">${key}</span>
  <input type="${typeof array[key]}" name="${key}" id="${key}" class="form-control" aria-label="Sizing example input" value="${inputtype(collection[key])}" aria-describedby="inputGroup-sizing-sm">
</span>`
                })
                objects += `<div class="collapse inner-arr-txt" id="${CardID}">
              <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${CardID}_${i2}" aria-expanded="false" aria-controls="${CardID}_${i2}" style="margin-left: -20px; margin-right: -10px;">
                <svg class="bi pe-none me-2 " width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
              </span>
              <span>${i2} : Object</span>
              ${object_children}
            </div>`
              }
              return objects;
            }

            function handleNested(nest, CardID) {
              let objects = '';
              let i2 = 0;

              Object.keys(nest).forEach(key => {
                i2++
                if (typeof nest[key] === 'object') {
                  objects += `<div class="collapse inner-arr-txt" id="${CardID}">
              <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${CardID}_${i2}" aria-expanded="false" aria-controls="${CardID}_${i2}" style="margin-left: -20px; margin-right: -10px;">
                <svg class="bi pe-none me-2 " width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
              </span>
            <span>${key} : Nest (${Object.keys(nest[key]).length})</span>
            ${handleNested(nest[key], `${CardID}_${i2}`)}
            </div>`
              }else{
                  objects += `<span class="input-group input-group-sm mb-3 collapse inner-arr-txt" id="${CardID}" style="width: max-content; margin-right: 50px;">
  <span class="input-group-text" id="inputGroup-sizing-sm">${key}</span>
  <input type="${nest[key]}" name="${key}" id="${key}" class="form-control" aria-label="Sizing example input" value="${inputtype(collection[key])}" aria-describedby="inputGroup-sizing-sm">
</span>`
              }
              });
              return objects;
            }

            keys.forEach(key => {
              if(key === "_id"){
              }else{
              if(Array.isArray(collection[key])){
                card_text += `<div class="card-text" style="margin-bottom: 0px; margin-left: 20px;">
            <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${i}_${key}" aria-expanded="false" aria-controls="${i}_${key}" style="margin-left: -20px; margin-right: -10px;">
              <svg class="bi pe-none me-2" width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
            </span>
            <span>${key} : Array (${collection[key].length})</span>
            ${handleArr(collection[key], `${i}_${key}`)}
            </div>`
              }else { 
                if (typeof collection[key] === 'object') {
                  card_text += `<div class="card-text" style="margin-bottom: 0px; margin-left: 20px;">
            <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${i}_${key}" aria-expanded="false" aria-controls="${i}_${key}" style="margin-left: -20px; margin-right: -10px;">
              <svg class="bi pe-none me-2" width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
            </span>
            <span>${key} : Nest (${Object.keys(collection[key]).length})</span>
            ${handleNested(collection[key], `${i}_${key}`)}
            </div>`
              }else{
              card_text += `<span class="input-group input-group-sm mb-3">
  <span class="input-group-text" id="inputGroup-sizing-sm">${key}</span>
  <input type="${collection[key]}" name="${key}" id="${key}" class="form-control" aria-label="Sizing example input" value="${inputtype(collection[key])}" aria-describedby="inputGroup-sizing-sm">
</span>`
              }
            }
  }
})
            return `<div class="d-flex align-items-stretch" id="${i}">
            <div class="card" style="width: max-content; height: max-content; background-color: #1a1d20; border: none; box-shadow: 7.5px 7.5px 2.5px #2c3236;">
        <div class="card-body">
          ${card_text}
        </div>
      </div>
      </div>`

  }

  function build_json(data, i, modal) {
            let collection = data
            let card_text = '';
            let keys = Object.keys(collection)

            function input_type(input, type) {
              
              if(!input){
                return `""`
            }
              if(type.includes('te')){
                return `"${input}"`
              }else{
                return input
              }
            }

            function handleArr(array, CardID) {
              let objects = '';
              for (let i2 = 0; i2 < array.length; i2++) {
                let object_children = '';
                Object.keys(array[i2]).forEach(key => {
                  objects_children += `"${key}" : ${input_type($(`#${modal}Modal-content`).find(`#${key}`).val(), $(`#${modal}Modal-content`).find(`#${key}`).prop("type"))}, `
                })
            objects += `{${object_children}},`
              }
              return objects;
            }

            function handleNested(nest, CardID) {
              let objects = '';
              let i2 = 0;

              Object.keys(nest).forEach(key => {
                i2++
                if (typeof nest[key] === 'object') {
            objects += `"${key}" : {${handleNested(nest[key], `${CardID}_${i2}`)}},`
              }else{
                  objects	+= `"${key}" : ${input_type($(`#${modal}Modal-content`).find(`#${key}`).val(), $(`#${modal}Modal-content`).find(`#${key}`).prop("type"))},`
              }
              });
              return objects;
            }

            keys.forEach(key => {
              if(key === "_id"){
              }else{
              if(Array.isArray(collection[key])){
            card_text += `"${key}" : [${handleArr(collection[key], `${i}_${key}`)}],`
              }else { 
                if (typeof collection[key] === 'object') {
            card_text += `"${key}" : {${handleNested(collection[key], `${i}_${key}`)}},`
              }else{
               card_text += `"${key}" : ${input_type($(`#${modal}Modal-content`).find(`#${key}`).val(), $(`#${modal}Modal-content`).find(`#${key}`).prop("type"))},`
              }
            }
          }
            });
      let text = `{ ${card_text}}`
      text = text.replaceAll(',}', '}')
      return text

  }

  function create_edit_card(data, i) {
            let collection = data
            let card_text = '';
            let keys = Object.keys(collection)

            function handleArr(array, CardID) {
              let objects = '';
              for (let i2 = 0; i2 < array.length; i2++) {
                let object_children = '';
                Object.keys(array[i2]).forEach(key => {
                  objects_children += `<span class="input-group input-group-sm mb-3 collapse inner-arr-txt" id="${CardID}_${i2}" style="width: max-content; margin-right: 50px;">
  <span class="input-group-text" id="inputGroup-sizing-sm">${key}</span>
  <input type="${typeof array[key]}" name="${key}" id="${key}" class="form-control" aria-label="Sizing example input" value="${array[key]}" aria-describedby="inputGroup-sizing-sm">
</span>`
                })
                objects += `<div class="collapse inner-arr-txt" id="${CardID}">
              <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${CardID}_${i2}" aria-expanded="false" aria-controls="${CardID}_${i2}" style="margin-left: -20px; margin-right: -10px;">
                <svg class="bi pe-none me-2 " width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
              </span>
              <span>${i2} : Object</span>
              ${object_children}
            </div>`
              }
              return objects;
            }

            function handleNested(nest, CardID) {
              let objects = '';
              let i2 = 0;

              Object.keys(nest).forEach(key => {
                i2++
                if (typeof nest[key] === 'object') {
                  objects += `<div class="collapse inner-arr-txt" id="${CardID}">
              <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${CardID}_${i2}" aria-expanded="false" aria-controls="${CardID}_${i2}" style="margin-left: -20px; margin-right: -10px;">
                <svg class="bi pe-none me-2 " width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
              </span>
            <span>${key} : Nest (${Object.keys(nest[key]).length})</span>
            ${handleNested(nest[key], `${CardID}_${i2}`)}
            </div>`
              }else{
                  objects += `<span class="input-group input-group-sm mb-3 collapse inner-arr-txt" id="${CardID}" style="width: max-content; margin-right: 50px;">
  <span class="input-group-text" id="inputGroup-sizing-sm">${key}</span>
  <input type="${typeof nest[key]}" name="${key}" id="${key}" class="form-control" aria-label="Sizing example input" value="${nest[key]}" aria-describedby="inputGroup-sizing-sm">
</span>`
              }
              });
              return objects;
            }

            keys.forEach(key => {
              if(key === "_id"){
              }else{
              if(Array.isArray(collection[key])){
                card_text += `<div class="card-text" style="margin-bottom: 0px; margin-left: 20px;">
            <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${i}_${key}" aria-expanded="false" aria-controls="${i}_${key}" style="margin-left: -20px; margin-right: -10px;">
              <svg class="bi pe-none me-2" width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
            </span>
            <span>${key} : Array (${collection[key].length})</span>
            ${handleArr(collection[key], `${i}_${key}`)}
            </div>`
              }else { 
                if (typeof collection[key] === 'object') {
                  card_text += `<div class="card-text" style="margin-bottom: 0px; margin-left: 20px;">
            <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${i}_${key}" aria-expanded="false" aria-controls="${i}_${key}" style="margin-left: -20px; margin-right: -10px;">
              <svg class="bi pe-none me-2" width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
            </span>
            <span>${key} : Nest (${Object.keys(collection[key]).length})</span>
            ${handleNested(collection[key], `${i}_${key}`)}
            </div>`
              }else{
              card_text += `<span class="input-group input-group-sm mb-3">
  <span class="input-group-text" id="inputGroup-sizing-sm">${key}</span>
  <input type="${typeof collection[key]}" name="${key}" id="${key}" class="form-control" aria-label="Sizing example input" value="${collection[key]}" aria-describedby="inputGroup-sizing-sm">
</span>`
              }
            }
          }
            })
            return `<div class="d-flex align-items-stretch" id="${i}">
            <div class="card" style="width: max-content; height: max-content; background-color: #1a1d20; border: none; box-shadow: 7.5px 7.5px 2.5px #2c3236;">
        <div class="card-body">
          ${card_text}
        </div>
      </div>
      </div>`

  }
  
  function loading_cards() {
    $('#inside-collection').empty();
        for (let i = 0; i < (Math.floor(Math.random()*10)+2); i++) {
          $('#inside-collection').append(`<div class="card" style="width: 350px; height: min-content; background-color: #1a1d20; border: none; box-shadow: 7.5px 7.5px 2.5px #2c3236;">
        <div class="card-body">
          <p class="card-text placeholder-glow">
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
            <span class="placeholder col-${Math.floor(Math.random()*(10-3+1))+3}" style="border-radius: 3px;"></span>
          </p>
        </div>
      </div>`);
        }
  }

  function load_cards() {
    let element = '#refreshbtn'
    let selectedCollection = $('input[type="radio"][name="collection"]:checked').attr('id');
        $('#col-selector').html(`${icon('layer-group-solid')}Collection: ${selectedCollection}`)
        $('#col-selector').data("bs-collection", `${selectedCollection}`)
        $('#insertbtn').prop("disabled", true)
        $('#col-selector').prop("disabled", true)
        $('#search-bar').prop("disabled", true)
        $(element).prop("disabled", true)
        $(element).find('#icon').hide()
        $(element).find('#spinner').show()
        loading_cards()

        setTimeout(() => {
          axios.get(`/api/database/find?collection=${selectedCollection}`)
        .then(function(response) {
          $('#inside-collection').empty();
            const data = response.data
          for (let i = 0; i < data.length; i++) {
            let collection = data[i]
            let card_text = '';
            let keys = Object.keys(data[i])

            function handleArr(array, CardID) {
              let objects = '';
              for (let i2 = 0; i2 < array.length; i2++) {
                let object_children = '';
                Object.keys(array[i2]).forEach(key => {
                  object_children += `<p class="collapse inner-arr-txt" id="${CardID}_${i2}">${key} : ${array[i2][key]}</p>`
                })
                objects += `<div class="collapse inner-arr-txt" id="${CardID}">
              <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${CardID}_${i2}" aria-expanded="false" aria-controls="${CardID}_${i2}" style="margin-left: -20px; margin-right: -10px;">
                <svg class="bi pe-none me-2 " width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
              </span>
              <span>${i2} : Object</span>
              ${object_children}
            </div>`
              }
              return objects;
            }

            function handleNested(nest, CardID) {
              let objects = '';
              let i2 = 0;

              Object.keys(nest).forEach(key => {
                i2++
                if (typeof nest[key] === 'object') {
                  objects += `<div class="collapse inner-arr-txt" id="${CardID}">
              <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${CardID}_${i2}" aria-expanded="false" aria-controls="${CardID}_${i2}" style="margin-left: -20px; margin-right: -10px;">
                <svg class="bi pe-none me-2 " width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
              </span>
            <span>${key} : Nest (${Object.keys(nest[key]).length})</span>
            ${handleNested(nest[key], `${CardID}_${i2}`)}
            </div>`
              }else{
                  objects += `<p class="collapse inner-arr-txt" id="${CardID}">${key} : ${nest[key]}</p>`
              }
              });
              return objects;
            }

            keys.forEach(key => {
              if(Array.isArray(collection[key])){
                card_text += `<div class="card-text" style="margin-bottom: 0px; margin-left: 20px;">
            <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${i}_${key}" aria-expanded="false" aria-controls="${i}_${key}" style="margin-left: -20px; margin-right: -10px;">
              <svg class="bi pe-none me-2" width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
            </span>
            <span>${key} : Array (${collection[key].length})</span>
            ${handleArr(collection[key], `${i}_${key}`)}
            </div>`
              }else { 
                if (typeof collection[key] === 'object') {
                  card_text += `<div class="card-text" style="margin-bottom: 0px; margin-left: 20px;">
            <span class="exp-arr" onclick="exp_arr(this)" data-bs-toggle="collapse" data-bs-target="#${i}_${key}" aria-expanded="false" aria-controls="${i}_${key}" style="margin-left: -20px; margin-right: -10px;">
              <svg class="bi pe-none me-2" width="16" height="16"><use class="arr-pointer" xlink:href="#caret-right-solid"/></svg>
            </span>
            <span>${key} : Nest (${Object.keys(collection[key]).length})</span>
            ${handleNested(collection[key], `${i}_${key}`)}
            </div>`
              }else{
              card_text += `<p class="card-text" style="margin-bottom: 0px; margin-left: 20px;">${key} : ${collection[key]}</p>`
              }
            }
            });
            $('#inside-collection').append(`<div class="search-card" id="${i}">
            <div class="card" style="width: 350px; height: max-content; background-color: #1a1d20; border: none; box-shadow: 7.5px 7.5px 2.5px #2c3236;">
        <div class="card-tools z-2 d-flex position-relative flex-wrap">
            <button type="button" data-bs-toggle="modal" data-bs-target="#editobjModal" data-bs-objno="${i}" data-bs-json='${JSON.stringify(collection)}' class="btn btn-dark card-tool position-absolute top-0 end-0" style="margin-right: 130px;" aria-disabled="false" title="Edit" aria-label="Edit"><svg class="bi pe-none me-2 position-absolute top-50 start-50 translate-middle" width="16" height="16" style="padding-right: -10px;"><use xlink:href="#pen-to-square-solid"/></svg></button>
            <button onclick="copyJSON(this)" id="copyToastBtn" type="button" class="btn btn-dark card-tool position-absolute top-0 end-0" style="margin-right: 90px;" aria-disabled="false" title="Copy" aria-label="Copy"><svg class="bi pe-none me-2 position-absolute top-50 start-50 translate-middle" width="16" height="16" style="padding-right: -10px;"><use xlink:href="#copy-solid"/></svg><span id="json" style="display: none;">${JSON.stringify(collection)}</span></button>
            <button type="button" data-bs-toggle="modal" data-bs-target="#cloneobjModal" data-bs-objno="${i}" data-bs-json='${JSON.stringify(collection)}' class="btn btn-dark card-tool position-absolute top-0 end-0" style="margin-right: 50px;" aria-disabled="false" title="Clone" aria-label="Clone"><svg class="bi pe-none me-2 position-absolute top-50 start-50 translate-middle" width="16" height="16" style="padding-right: -10px;"><use xlink:href="#clone-solid"/></svg></button>
            <button type="button" data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-objno="${i}" class="btn btn-danger card-tool position-absolute top-0 end-0" aria-disabled="false" title="Delete" aria-label="Delete"><svg class="bi pe-none me-2 position-absolute top-50 start-50 translate-middle" width="16" height="16" style="padding-right: -10px;"><use xlink:href="#trash-solid"/></svg></button>
        </div>
        <div class="card-body">
          ${card_text}
        </div>
      </div>
      </div>`)
          }
          $('#insertbtn').prop("disabled", false);
          $('#col-selector').prop("disabled", false)
          $('#search-bar').prop("disabled", false)
          $('#insertbtn').data('bs-schema', `${$('input[type="radio"][name="collection"]:checked').data('bs-schema')}`)
      $(element).prop("disabled", false)
        $(element).find('#icon').show()
        $(element).find('#spinner').hide()
        })
        .catch(function(error) {
            console.error('Error:', error);
        });
        }, 500);
  }

  function checkLoad(element) {
    if($(element).attr('id') === $('#col-selector').data("bs-collection")){

    }else{
      load_cards()
    }
  }

  $(document).ready(function(){
    loading_cards()
    axios.get(`/api/database/collections`)
        .then(function(response) {
          for (let i = 0; i < response.data.length; i++) {
            const element = response.data[i];
            if(i === response.data.length-1){
              $('#col-selector').html(`${icon('layer-group-solid')}Collection: ${element.name}`)
           $('#collections-sel').prepend(`<li><input onclick="checkLoad(this)" type="radio" class="btn-check" name="collection" id='${element.name}' autocomplete="off" checked>
                    <label class="btn btn-outline-primary dropdown-item" for="${element.name}">${element.name}</label></li>`)
                    $(`#${element.name}`).data('bs-schema', `${element.json}`)
            }else{
              $('#collections-sel').prepend(`<li><input onclick="checkLoad(this)" type="radio" class="btn-check" name="collection" id='${element.name}' autocomplete="off">
                    <label class="btn btn-outline-primary dropdown-item" for="${element.name}">${element.name}</label></li>`)
                    $(`#${element.name}`).data('bs-schema', `${element.json}`)
            }
          }
          load_cards()
        }).catch(function(error){
          toast('An Error Occured While Fetching Collections.')
          console.log(error)
        })
})

  </script>
  </body>
</html>